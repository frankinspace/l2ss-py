# This is a basic workflow to help you get started with Actions

name: Build Develop branch

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.8
      - name: Get version
        id: get-version
        run: echo "::set-output name=current_version::$(poetry version | awk '{print $2}')"
      - name: Bump pre-alpha version
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          new_ver="${{ steps.get-version.outputs.current_version }}+$(git rev-parse --short ${GITHUB_SHA})"
          poetry version $new_ver
          echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV
      - name: Bump alpha version
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          poetry version prerelease
          echo "software_version=$(poetry version | awk '{print $2}')" >> $GITHUB_ENV
      - name: Echo new version
        run: echo ${{ env.software_version }}
      - name: Commit Version Bump
        run: |
          git config --global user.name 'l2sspy bot'
          git config --global user.email 'l2sspy@noreply.github.com'
          git commit -am "/version ${{ env.software_version }}"
          git push
      - uses: actions-ecosystem/action-push-tag@v1
        if: ${{ env.software_version != null }}
        with:
          tag: ${{ env.software_version }}
          message: "Version ${{ env.software_version }}"

#      - name: Install l2ss-py
#        run: poetry install -E harmony
#      - name: Lint
#        run: |
#          poetry run pylint podaac
#          poetry run flake8 podaac
#      - name: Test and coverage
#        run: |
#          poetry run pytest --junitxml=build/reports/pytest.xml --cov=podaac/ --cov-report=xml:build/reports/coverage.xml -m "not aws and not integration" tests/
#      - name: Upload pytest test results
#        # Always run this step to publish test results even if there are test failures
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v2
#        with:
#          name: test-results
#          path: build/reports/pytest.xml
#      - name: SonarCloud Scan
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        with:
#          args: >
#            -Dsonar.organization=frankinspace
#            -Dsonar.projectKey=frankinspace_l2ss-py
#            -Dsonar.python.coverage.reportPaths=build/reports/coverage.xml
#            -Dsonar.sources=podaac/
#            -Dsonar.tests=tests/
#            -Dsonar.projectName=l2ss-py
#            -Dsonar.projectVersion=${{ env.software_version }}
#            -Dsonar.python.version=3.7,3.8,3.9
#      - name: Run Snyk to check for dependency vulnerabilities
#        uses: snyk/actions/python-3.8@master
#        continue-on-error: true # To make sure that SARIF upload gets called
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        with:
#          args: >
#            --severity-threshold=high
#            --fail-on=all
#            --sarif-file-output=snyk.sarif
#      - name: Upload result to GitHub Code Scanning
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          sarif_file: snyk.sarif
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
